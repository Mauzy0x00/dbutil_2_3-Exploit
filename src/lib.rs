use std::mem::size_of;
use std::ptr::null;
use windows::Win32::System::Ioctl::*;
use windows::Win32::Storage::FileSystem::*;
use windows::Win32::System::Diagnostics::Debug::*;
use windows::Win32::Foundation::*;

// Open a handle to the DBUtil driver using its symbolic link name
pub unsafe fn open_dev() -> HANDLE {
    CreateFileA(
        "\\\\.\\DBUtil_2_3\0".as_ptr() as _,        // '\\\\.\\' prefix is the modern way to to say "DosDevices" which represents the global namespace. The function is expecting null termination so '\0' is appended
        GENERIC_READ | GENERIC_WRITE,          // These are access permissions. These require the windows-sys crate, not the standard windows crate in rust
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        None,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        None,
    ).expect("failed to open device")
}

// Take a handle to the DBUtil device
pub unsafe fn ioctl(dev: HANDLE, num: u32, io_buffer: PVOID, buffer_length: usize) -> bool {
    DeviceIoControl(
        dev,        
        num,                    // IOCTL code
        io_buffer,              // IO buffer
        buffer_length as _,     // IO buffer size
        io_buffer,              // IO buffer
        buffer_length as _,     // UI buffer size
        None,                   // null_mut
        None,                   // null_mut
    ) != 0
}


pub fn add(left: usize, right: usize) -> usize {
    left + right
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        let result = add(2, 2);
        assert_eq!(result, 4);
    }
}
